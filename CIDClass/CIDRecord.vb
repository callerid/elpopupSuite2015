Imports System.Text.RegularExpressions
Public Class CIDRecord

    Public Name As String
    Public Phone As String
    Public Duration As Integer
    Public Line As Integer
    Public CallStart As Boolean 'I think 'start' is a bad name for a public variable
    Public Checksum As Boolean
    Public CallTime As DateTime
    Public DetailType As String
    Public Rings As Integer
    Public RingType As String
    Public UnitID As String
    Public SerialNumber As String
    Public Inbound As Boolean 'use .IsInbound to find out
    Public specialRecord As Boolean = False
    Public recordType As Integer
    Public index As Integer
    Private Limited As Boolean
    Private detail As Boolean
    Private generated As Boolean = False

    Public Const STANDARD_RECORD As Integer = 0
    Public Const DETAIL_RECORD As Integer = 1
    Public Const WC2_MEMORY_RECORD As Integer = 2
    Public Const WC2_MEMORY_AMOUNT As Integer = 3

    Public Overrides Function ToString() As String
        Dim stBuild As String = ""
        Dim tempChar As Char
        If Not (UnitID = Nothing) Then
            stBuild = stBuild + "^^<U>" + UID_Encoder(UnitID)
        End If

        If Not (SerialNumber = Nothing) Then
            stBuild = stBuild + "<S>" + UID_Encoder(SerialNumber) + "$"
        End If
        stBuild = stBuild + Line.ToString.PadLeft(2, "0") ' Line number
        If Inbound Then tempChar = "I" Else tempChar = "O"
        stBuild = stBuild + " " + tempChar ' Inbound/Outbound
        If CallStart Then tempChar = "S" Else tempChar = "E"
        stBuild = stBuild + " " + tempChar ' Call Start/End
        stBuild = stBuild + " " + Duration.ToString.PadLeft(4, "0") ' Duration
        If Checksum Then tempChar = "G" Else tempChar = "B"
        stBuild = stBuild + " " + tempChar ' Checksum
        stBuild = stBuild + " " + RingType ' Ring Type
        stBuild = stBuild + Rings.ToString ' Ring Number
        stBuild = stBuild + " " + CallTime.ToString("MM/dd hh:mm tt") 'time
        stBuild = stBuild + " " + Phone.PadRight(14, " ") ' Phone Number
        stBuild = stBuild + " " + Name.PadRight(15, " ") ' Name

        Return stBuild
    End Function
    Public Sub New(Optional ByVal recordText As String = "", Optional ByVal timeSource As Integer = 0)
        '0 is from box, 1 is from the computer's local time
        If Not recordText = "" Then ImportCallRecord(recordText)
    End Sub
    Public Function IsFullRecord() As Boolean
        If Limited = False Then Return True Else Return False
    End Function
    Public Function IsDetailed() As Boolean ' need to work on this one
        If detail Then Return True Else Return False
    End Function
    Public Function IsStandard() As Boolean
        If detail Then Return False Else Return True
    End Function
    Public Function isSpecial() As Boolean
        If specialRecord Then Return True Else Return False
    End Function
    Public Function IsOutbound() As Boolean
        If Inbound = True Then Return False Else Return True
    End Function
    Public Function IsInbound() As Boolean
        If Inbound = True Then Return True Else Return False
    End Function
    Public Function IsStartRecord() As Boolean
        If CallStart = True Then Return True Else Return False
    End Function
    Public Function IsEndRecord() As Boolean
        If CallStart = True Then Return False Else Return True
    End Function
    Public Function IsGoodChecksum() As Boolean
        If Checksum Then Return True Else Return False
    End Function
    Public Function IsAMTime() As Boolean
        If CallTime.Hour > 11 Then Return False Else Return True
    End Function
    Public Function IsTimeAutoGenerated() As Boolean
        If generated Then Return True Else Return False
    End Function
    Public Sub ImportCallRecord(ByVal CallRecord As String)
        Dim sSubSet As String
        Dim ix As Integer
        Dim CallMatch As System.Text.RegularExpressions.Match

        'Find out the UnitID and serial number, if any
        If InStr(CallRecord, "^^<U>") > 0 Then
            ix = InStr(CallRecord, "^^<U>") - 1
            sSubSet = CallRecord.Substring(ix, 11) ' the size of the whole string(11)
            UnitID = CIDFunctions.UID_Decoder(Right(sSubSet, 6))
            CallRecord = CallRecord.Remove(ix, 11)
        End If
        If InStr(CallRecord, "<S>") > 0 Then
            ix = InStr(CallRecord, "<S>") - 1
            sSubSet = CallRecord.Substring(ix, 9)
            SerialNumber = CIDFunctions.UID_Decoder(Right(sSubSet, 6))
            CallRecord = CallRecord.Remove(ix, 9)
        End If
        ' instead of requireing the full 'packet' of data, you can just send the callerid record
        ' we'll remove everything before the first $ and then you can use this sub for
        ' serial data as well as packet information.
        ix = InStr(CallRecord, "$")
        CallRecord = CallRecord.Remove(0, ix)
        'we are now (theoretically) left with just the WC output.
        'Replace any $'s with nothings
        CallRecord = CallRecord.Replace("$", "")

        CallMatch = Regex.Match(CallRecord, ".*(\d\d) ([IO]) ([ES]) (\d{4}) ([GB]) (.)(\d) (\d\d/\d\d \d\d:\d\d [AP]M) (.{8,15})(.*)")
        '                                       |      |      |      |       |    |   |            |                      |      |
        '                                   01 Line #  |      |      |       |    | 07 Ring#       |                      |    10 Name
        '                               02 Inbound/outbound   |   04 Duration| 06 Ring Type        |                 09 Phone Number
        '                                               03 Start/End recrod  |          08 Date of call start
        '                                                                05 Good/Bad record checksum
        If CallMatch.Success Then ' it's a full record.
            detail = False
            Limited = False
            Line = Val(CallMatch.Groups.Item(1).Value)
            If CallMatch.Groups.Item(3).Value = "S" Then CallStart = True Else CallStart = False
            If CallMatch.Groups.Item(2).Value = "I" Then Inbound = True Else Inbound = False
            DetailType = CallMatch.Groups.Item(2).Value
            Duration = Val(CallMatch.Groups.Item(4).Value)
            If CallMatch.Groups.Item(5).Value = "G" Then Checksum = True Else Checksum = False
            RingType = CallMatch.Groups.Item(6).Value
            Rings = Val(CallMatch.Groups.Item(7).Value)
            Try
                CallTime = Date.ParseExact(CallMatch.Groups.Item(8).Value, "MM/dd hh:mm tt", System.Globalization.DateTimeFormatInfo.CurrentInfo)
            Catch ex As Exception
                CallTime = My.Computer.Clock.LocalTime
                generated = True
            End Try
            Phone = CallMatch.Groups.Item(9).Value.Trim(" ")
            Name = CallMatch.Groups.Item(10).Value.Replace(vbCr, "").Trim(" ") ' Sometimes carrage returns sneak in the serial port door.
        End If

        CallMatch = Regex.Match(CallRecord, ".*(\d\d) ([NFR]) {13}(\d\d/\d\d \d\d:\d\d:\d\d)")
        If CallMatch.Success Then ' it's a detail record.
            detail = True
            Limited = False
            DetailType = CallMatch.Groups.Item(2).Value
            Line = Val(CallMatch.Groups.Item(1).Value)
            Try
                CallTime = Date.ParseExact(CallMatch.Groups.Item(3).Value, "MM/dd HH:mm:ss", System.Globalization.DateTimeFormatInfo.CurrentInfo)
            Catch ex As Exception
                CallTime = My.Computer.Clock.LocalTime
                generated = True
            End Try
        End If

        CallMatch = Regex.Match(CallRecord, ".*(\d{4}) (\d{2}) (\d\d/\d\d \d\d:\d\d) ([IO]) ([ES]) (\d{4}) ([GB]) (\w)(\d) (.{8,15})(.{8,15})")
        '0001 01 06/07 08:09 I E 0000 G A1 9987654321     John Smith    |
        If CallMatch.Success Then 'It's a Whozz Calling 2 memory download
            specialRecord = True
            recordType = WC2_MEMORY_RECORD
            index = Val(CallMatch.Groups.Item(1).Value)
            Line = Val(CallMatch.Groups.Item(2).Value)
            Try
                CallTime = Date.ParseExact(CallMatch.Groups.Item(3).Value, "MM/dd HH:mm", System.Globalization.DateTimeFormatInfo.CurrentInfo)
            Catch ex As FormatException
                CallTime = My.Computer.Clock.LocalTime
                generated = True
            End Try
            If CallMatch.Groups.Item(4).Value = "I" Then Inbound = True Else Inbound = False
            If CallMatch.Groups.Item(5).Value = "S" Then CallStart = True Else CallStart = False
            Duration = Val(CallMatch.Groups.Item(6).Value)
            If CallMatch.Groups.Item(7).Value = "G" Then Checksum = True Else Checksum = False
            RingType = CallMatch.Groups.Item(8).Value
            Rings = Val(CallMatch.Groups.Item(9).Value)
            Phone = CallMatch.Groups.Item(10).Value.Trim(" ")
            Name = CallMatch.Groups.Item(11).Value.Replace(vbCr, "").Trim(" ") ' Sometimes carrage returns sneak in the serial port door.
        End If

        CallMatch = Regex.Match(CallRecord, ".*(\d{4}) ?$")
        '0001 01 06/07 08:09 I E 0000 G A1 9987654321     John Smith    |
        If CallMatch.Success Then 'It's a Whozz Calling 2 memory download
            specialRecord = True
            recordType = WC2_MEMORY_AMOUNT
            index = Val(CallMatch.Groups.Item(1).Value)
        End If

    End Sub
End Class

Public Class EthernetLinkDevice
    Public Serial As String
    Public UnitID As String
    Public DestIP As String
    Public IntIP As String
    Public DestMac As String
    Public IntMac As String
    Public IntPort As String
    Public DestPort As String

    Public Sub ImportData(ByVal sData As String)
        Dim ix As Integer
        ix = InStr(sData, "$")
        sData = sData.Substring(ix)
        'Serial
        Serial = IDX_extractor("S", sData, 6)
        'UnitID
        UnitID = IDX_extractor("U", sData, 6)
        'DestIP
        DestIP = CIDFunctions.IPFromHex(IDX_extractor("D", sData, 4))
        'IntIP
        IntIP = CIDFunctions.IPFromHex(IDX_extractor("I", sData, 4))
        'DestMac
        DestMac = IDX_extractor("C", sData, 6)
        'IntMac
        IntMac = IDX_extractor("M", sData, 6)
        'DestPort
        DestPort = Str(Convert.ToInt32(IDX_extractor("P", sData, 2), 16))
        'IntPort
        IntPort = Str(Convert.ToInt32(IDX_extractor("T", sData, 2), 16))

    End Sub
    Private Function IDX_extractor(ByVal sLetter As String, ByVal sData As String, ByVal nLength As Integer)
        Dim ix As Integer
        ix = InStr(sData, "<" + sLetter.ToUpper + ">")
        sData = sData.Substring(ix + 2, nLength)
        Return CIDFunctions.UID_Decoder(sData)
    End Function
End Class

Public Module CIDFunctions
    Private rNumber As New Random
    Public Function FakeRecordGenerator() As String
        Dim nLine As Integer = 0
        Dim cInbout As String = "I"
        Dim cStartEnd As String = "S"
        Dim nDuration As Integer = 0
        Dim sDate As String = "01/20"
        Dim sTime As String = "12:00"
        Dim sAMPM As String = "AM"
        Dim sPhoneNumber As String
        Dim sName As String
        Dim sCallerID As String

        nLine = Math.Floor(rNumber.NextDouble * 8) + 1
        nDuration = Math.Floor(rNumber.NextDouble * 300)
        sTime = (Math.Floor(rNumber.NextDouble * 12) + 1).ToString.PadLeft(2, "0") + ":" + _
            (Math.Floor(rNumber.NextDouble * 60)).ToString.PadLeft(2, "0")
        sPhoneNumber = (Math.Floor(rNumber.NextDouble * 500) + 200).ToString + "-" + _
            (Math.Floor(rNumber.NextDouble * 500) + 200).ToString + "-" + _
            (Math.Floor(rNumber.NextDouble * 8000) + 1000).ToString + "  "
        sName = FakeNameGenerator()
        If sName.Length > 15 Then
            sName = sName.Substring(0, 15)
        End If
        sCallerID = "0" + nLine.ToString + " I S " + nDuration.ToString.PadLeft(4, "0") + " G A2 01/25 " + _
        sTime + " AM " + sPhoneNumber + " " + sName.PadRight(15, " ")
        Return sCallerID
    End Function

    Private Function FakeNameGenerator() As String
        Dim lFirstNames As New List(Of String)
        Dim lLastNames As New List(Of String)
        lFirstNames.Add("Agnes")
        lFirstNames.Add("Artie")
        lFirstNames.Add("Benjamin")
        lFirstNames.Add("Doug")
        lFirstNames.Add("Gary")
        lFirstNames.Add("Bernice")
        lFirstNames.Add("Brandine")
        lFirstNames.Add("Cecil")
        lFirstNames.Add("Charlie")
        lFirstNames.Add("Cookie")
        lFirstNames.Add("Constance")
        lFirstNames.Add("Dave")
        lFirstNames.Add("Jasper")
        lFirstNames.Add("Jebediah")
        lFirstNames.Add("Lindsey")
        lFirstNames.Add("Luigi")
        lFirstNames.Add("Manjula")
        lFirstNames.Add("Marvin")
        lFirstNames.Add("Ruth")
        lFirstNames.Add("Sanjay")
        lFirstNames.Add("Homer")
        lFirstNames.Add("Marjorie")
        lFirstNames.Add("Bart")
        lFirstNames.Add("Lisa")
        lFirstNames.Add("Margaret")
        lFirstNames.Add("Ned")
        lFirstNames.Add("Maude")
        lFirstNames.Add("Rod")
        lFirstNames.Add("Todd")
        lFirstNames.Add("Kirk")
        lFirstNames.Add("Luann")
        lFirstNames.Add("Milhouse")
        lFirstNames.Add("Apu")
        lFirstNames.Add("Manjula")
        lFirstNames.Add("Clancy")
        lFirstNames.Add("Ralph")
        lFirstNames.Add("Timothy")
        lFirstNames.Add("Helen")
        lFirstNames.Add("Nelson")
        lFirstNames.Add("Cletus")
        lFirstNames.Add("Montgomery")
        lFirstNames.Add("Waylon")
        lFirstNames.Add("Lenny")
        lFirstNames.Add("Carl")
        lFirstNames.Add("Mindy")
        lFirstNames.Add("Karl")
        lFirstNames.Add("Seymour")
        lFirstNames.Add("Gary")
        lFirstNames.Add("Edna")
        lFirstNames.Add("Willie")
        lFirstNames.Add("Otto")
        lFirstNames.Add("Lou")
        lFirstNames.Add("Eddie")
        lFirstNames.Add("Snake")
        lFirstNames.Add("Robert")
        lFirstNames.Add("Hank")
        lFirstNames.Add("Anthony")
        lFirstNames.Add("Joey")
        lFirstNames.Add("Moe")
        lFirstNames.Add("Gil")
        lFirstNames.Add("Kent")
        lFirstNames.Add("Troy")
        lFirstNames.Add("Jasper")
        lFirstNames.Add("Eleanor")

        lLastNames.Add("Simpson")
        lLastNames.Add("Powell")
        lLastNames.Add("Bouvier")
        lLastNames.Add("Flanders")
        lLastNames.Add("Van Houten")
        lLastNames.Add("Nahasapeemapetilon")
        lLastNames.Add("Wiggum")
        lLastNames.Add("Hibbert")
        lLastNames.Add("Prince")
        lLastNames.Add("Lovejoy")
        lLastNames.Add("Muntz")
        lLastNames.Add("Spuckler")
        lLastNames.Add("Burns")
        lLastNames.Add("Smithers")
        lLastNames.Add("Leonald")
        lLastNames.Add("Carlson")
        lLastNames.Add("Simmons")
        lLastNames.Add("Grimes")
        lLastNames.Add("Quimby")
        lLastNames.Add("Skinner")
        lLastNames.Add("Tamzarian")
        lLastNames.Add("Chalmers")
        lLastNames.Add("Krabapple")
        lLastNames.Add("Hoover")
        lLastNames.Add("Pommelhorst")
        lLastNames.Add("Mann")
        lLastNames.Add("Jones")
        lLastNames.Add("Starbeam")
        lLastNames.Add("Zzyzwicz")
        lLastNames.Add("Banner")
        lLastNames.Add("Snider")
        lLastNames.Add("Harm")
        lLastNames.Add("Jailbird")
        lLastNames.Add("Terwilliger")
        lLastNames.Add("Botkowski")
        lLastNames.Add("Scorpio") ' Hank Scorpio is the best character ever.
        lLastNames.Add("Lanley")
        lLastNames.Add("Di Maggio")
        lLastNames.Add("D'Amico")
        lLastNames.Add("Risotto")
        lLastNames.Add("McCallister")
        lLastNames.Add("Duff")
        lLastNames.Add("Costington")
        lLastNames.Add("Hutz")
        lLastNames.Add("Gunderson")
        lLastNames.Add("Frink")
        lLastNames.Add("Moleman")
        lLastNames.Add("Naegle")
        lLastNames.Add("Kwan")
        lLastNames.Add("Brokman")
        lLastNames.Add("Pye")
        lLastNames.Add("Ziff")
        lLastNames.Add("McClure")
        lLastNames.Add("Wolfcastle")
        lLastNames.Add("Szyslak")
        lLastNames.Add("Gumble")
        lLastNames.Add("Riviera")
        lLastNames.Add("Beardley")
        lLastNames.Add("Gerald")
        lLastNames.Add("Abernathy")
        lLastNames.Add("Glick")
        lLastNames.Add("Allbright")
        ' The names are from "The Simpons". I know 'Nahasapeemapetilon' is too long for a 
        ' CallerID stream in itself, but if I left it out, I'd be a raceist. Thank you, come again.
        Return lFirstNames(Math.Floor(rNumber.NextDouble * lFirstNames.Count)) + " " + lLastNames(Math.Floor(rNumber.NextDouble * lLastNames.Count))
    End Function

    Public Function UID_Decoder(ByVal UnitID As String)
        ' The two Id's (Unit ID and Serial Number) come in as kinda compresed data
        ' to save space on the network chip. If you read the network packet directly
        ' in hex, then it reads normally. This function just turns it back into hex.
        Dim sDecoded As String = ""
        Dim caDecoded As Char()
        Dim nNumeric As Integer
        'If UnitID.Length <> 6 Then Return 0

        caDecoded = UnitID.ToCharArray
        For Each cBit As Char In caDecoded
            nNumeric = Asc(cBit)
            sDecoded = sDecoded + Hex(nNumeric).PadLeft(2, "0")
        Next
        Return sDecoded
    End Function

    Public Function UID_Encoder(ByVal UnitId As String)
        Dim sEncoded As String = ""
        If (UnitId.Length Mod 2) Then Return ""
        While UnitId.Length > 0
            Try 'In case it's not hex
                sEncoded = sEncoded + Chr(Convert.ToInt32(UnitId.Substring(0, 2), 16))
            Catch ex As Exception
                Return ""
            End Try
            UnitId = UnitId.Remove(0, 2)
        End While
        Return sEncoded
    End Function
    Public Function SerialNumberGenerator(ByVal nBuild As Integer, ByVal nVersion As Integer, Optional ByVal nSeries As Integer = 0) ' Not for the public
        Dim sDate As String = ""
        Dim sSerial As String = nVersion.ToString.PadLeft(2, "0")
        sSerial += nSeries.ToString.PadLeft(2, "0")
        sDate += Right(Date.Now.Year.ToString, 2)
        sDate += Date.Now.Month.ToString.PadLeft(2, "0")
        sDate += Date.Now.Day.ToString.PadLeft(2, "0")
        sSerial += sDate + nBuild.ToString.PadLeft(2, "0")

        Return sSerial
    End Function

    Public Function HexFromIP(ByVal sIP As String)
        ' This will return a 2 digit string
        Dim aIP As String()
        Dim sHexCode As String = ""
        aIP = sIP.Split(".")

        For Each IPOct As String In aIP
            sHexCode += Hex(Val(IPOct)).PadLeft(2, "0")
        Next

        Return sHexCode
    End Function
    Public Function IPFromHex(ByVal sHex As String)
        Dim sSubHex As String
        Dim sIP As String = ""
        Do While sHex.Length > 1
            sSubHex = Left(sHex, 2)
            sIP += Str(Convert.ToInt32(sSubHex, 16)).Trim(" ")
            sHex = Right(sHex, sHex.Length - 2)
            If sHex.Length > 0 Then sIP += "."
        Loop
        Return sIP
    End Function
End Module

